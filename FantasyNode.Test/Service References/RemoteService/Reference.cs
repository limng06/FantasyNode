//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34003
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConnection.RemoteService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteService.IBackService", CallbackContract=typeof(TestConnection.RemoteService.IBackServiceCallback))]
    public interface IBackService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackService/ImNew", ReplyAction="http://tempuri.org/IBackService/ImNewResponse")]
        void ImNew();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackService/ImNew", ReplyAction="http://tempuri.org/IBackService/ImNewResponse")]
        System.Threading.Tasks.Task ImNewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackService/Register", ReplyAction="http://tempuri.org/IBackService/RegisterResponse")]
        void Register(string guid, string zoo, string ip, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackService/Register", ReplyAction="http://tempuri.org/IBackService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string guid, string zoo, string ip, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackService/UnRegister", ReplyAction="http://tempuri.org/IBackService/UnRegisterResponse")]
        void UnRegister(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackService/UnRegister", ReplyAction="http://tempuri.org/IBackService/UnRegisterResponse")]
        System.Threading.Tasks.Task UnRegisterAsync(string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackService/SendNewestList")]
        void SendNewestList();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackService/SendMessage")]
        void SendMessage(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackServiceChannel : TestConnection.RemoteService.IBackService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackServiceClient : System.ServiceModel.DuplexClientBase<TestConnection.RemoteService.IBackService>, TestConnection.RemoteService.IBackService {
        
        public BackServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BackServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BackServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BackServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BackServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ImNew() {
            base.Channel.ImNew();
        }
        
        public System.Threading.Tasks.Task ImNewAsync() {
            return base.Channel.ImNewAsync();
        }
        
        public void Register(string guid, string zoo, string ip, string name) {
            base.Channel.Register(guid, zoo, ip, name);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string guid, string zoo, string ip, string name) {
            return base.Channel.RegisterAsync(guid, zoo, ip, name);
        }
        
        public void UnRegister(string guid) {
            base.Channel.UnRegister(guid);
        }
        
        public System.Threading.Tasks.Task UnRegisterAsync(string guid) {
            return base.Channel.UnRegisterAsync(guid);
        }
    }
}
